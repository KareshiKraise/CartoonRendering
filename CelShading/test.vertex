#version 430 core

layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
layout(location = 4) in vec3 Tangent; 
//out vec4 vPos;


uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

uniform mat3 NormalMatrix;
uniform vec3 CameraPos;
uniform vec3 LightDirection;


out vec2 UV;
out vec3 LightinTan;
out vec3 CamerainTan;
out vec3 FraginTan;
out vec3 FragPos;
out vec3 Normal;


//out vec3 ViewDir;
//out vec3 lightDir;
//out vec3 vPos;






void main(void)
{

	
	//world space
	vec4 worldPosition = M * vec4(vertexPosition, 1);

	vec3 Frag = vec3(M * vec4(vertexPosition, 1.0));
	
	//bitangent
	vec3 Bitangent = cross(vertexNormal, Tangent);

	
	vec3 T = normalize(mat3(M) * Tangent);
	vec3 B = normalize(mat3(M) * Bitangent);
	vec3 N = normalize(mat3(M) * vertexNormal);

	mat3 TBN = transpose(mat3(T,B, N));

	CamerainTan = TBN * CameraPos;
	LightinTan = TBN * LightDirection;
	FraginTan = TBN * Frag;
	FragPos = Frag;

	Normal = N;

	UV = vec2(vertexUV.x, 1-vertexUV.y);

	gl_Position = P * V * worldPosition;
		
	
	
}